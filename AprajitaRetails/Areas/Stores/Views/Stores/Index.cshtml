@model IEnumerable<AprajitaRetails.Shared.Models.Stores.Store>

@{
    ViewData["Title"] = " Stores";
}

<!-- Table with panel -->
<div class="card card-cascade narrower ">
    <div class="view view-cascade gradient-card-header blue-gradient narrower py-2 mx-4 mb-3 d-flex justify-content-between align-items-center">

        <div>
            <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="toastr.success('Sorry!, Button is not Implemented.');">
                <i class="fas fa-th-large mt-0"></i>
            </button>
            <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="toastr.success('Sorry!, Button is not Implemented.');">
                <i class="fas fa-columns mt-0"></i>
            </button>
        </div>

        <h3 class="white-text mx-3 ">Stores</h3>

        <div>
            <a asp-action="Create" class="btn btn-outline-white btn-rounded btn-sm px-2" id="create" data_modal=""> <i class="fas fa-plus-circle mt-0"></i></a>

            <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="toastr.success('Sorry!, Button is not Implemented.');">
                <i class="fas fa-pencil-alt mt-0"></i>
            </button>
            <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="toastr.success('Sorry!, Button is not Implemented.');">
                <i class="far fa-trash-alt mt-0"></i>
            </button>
            <button type="button" class="btn btn-outline-white btn-rounded btn-sm px-2" onclick="toastr.success('Sorry!, Button is not Implemented.');">
                <i class="fas fa-info-circle mt-0"></i>
            </button>
        </div>
    </div>
    <div class="px-4">

        <div class="table-wrapper ">
            <table id="dtMaterialDesignExample" cellspacing=" 0" width="100%" class="table bg-white table-hover  table-bordered table-sm  mb-0">
                <thead class="mdb-color-text text-center">
                    <tr>
                        <th></th>
                        <th class="th-sm">
                            @Html.DisplayNameFor(model => model.StoreCode)
                        </th>
                        <th class="th-sm">
                            @Html.DisplayNameFor(model => model.StoreName)
                        </th>

                        <th class="th-sm">
                            @Html.DisplayNameFor(model => model.City)
                        </th>

                        <th class="th-sm">
                            @Html.DisplayNameFor(model => model.PhoneNo)
                        </th>
                        <th class="th-lg">
                            @Html.DisplayNameFor(model => model.StoreManagerName)
                        </th>
                        <th class="th-sm">
                            @Html.DisplayNameFor(model => model.GSTNO)
                        </th>

                        <th class="th-lg">
                            @Html.DisplayNameFor(model => model.OpeningDate)
                        </th>

                        <th class="th-sm"></th>
                    </tr>
                </thead>
                <tbody class="text-center text-primary">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="text-left"></td>
                            <td>
                                @Html.DisplayFor(modelItem => item.StoreCode)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.StoreName)
                            </td>

                            <td>
                                @Html.DisplayFor(modelItem => item.City)
                            </td>

                            <td>
                                @Html.DisplayFor(modelItem => item.PhoneNo)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.StoreManagerName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.GSTNO)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.OpeningDate)
                            </td>
                            <td class="btn-group d-inline-flex">
                                <a class="btn btn-warning btn-sm btn-rounded" id="edit" data_modal="" asp-action="Edit" asp-route-id="@item.StoreId"><i class="fas fa-pencil-alt mt-0"></i></a>
                                <a class="btn btn-info btn-sm" id="detail" data_modal="" asp-action="Details" asp-route-id="@item.StoreId"><i class="fas fa-info-circle mt-0"></i></a>
                                <a class="btn btn-danger btn-sm btn-rounded" id="delete" data_modal="" asp-action="Delete" asp-route-id="@item.StoreId"><i class="fas fa-trash-alt mt-0"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<partial name="_OnlyModalPopUp" />

@section Scripts
{
    <script>
        //Web Operations
        const host = "https://localhost:445533/";
        const uri = `${host}api/Stores`;

        //Function: Add Store 
        function addStore() {
            const newStore = {
            };
            fetch(uri, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(item)
            })
                .then(response => response.json())
                .then(() => {
                    toastr("New Store is added successfuly");
                    
                    location.reload();
                })
                .catch(error => toastr("Unable to able to add!" + error));

        }
        function showEditForm(id) {
            //TODO:: new to pop up
        }

        function deleteStore(id) {

            fetch(`${uri}/${id}`, {
                method: 'DELETE'
            })
                .then(() => location.reload())
                .catch(error => toastr("Unable to delete due to error : "+error));
        }

        function updateStore() {
            const itemId = document.getElementById('edit-id').value;// Store some where Storeid and Fecth it
            const editStore = {
                id: parseInt(itemId, 10),
                isComplete: document.getElementById('edit-isComplete').checked,
                name: document.getElementById('edit-name').value.trim()
            };

            fetch(`${uri}/${itemId}`, {
                method: 'PUT',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(editStore)
            })
                .then(() => getItems())
                .catch(error => toastr("Unable to update item. :"+ error));

            closeInput();

            return false;

        }

    </script>
    @*<script>
            //Web Operations
            const host = "https://localhost:445533/";
            const uri = 'api/Stores';

            let todos = [];

            function getItems() {
                fetch(uri)
                    .then(response => response.json())
                    .then(data => _displayItems(data))
                    .catch(error => console.error('Unable to get items.', error));
            }

            function addItem() {
                const addNameTextbox = document.getElementById('add-name');

                const item = {
                    isComplete: false,
                    name: addNameTextbox.value.trim()
                };

                fetch(uri, {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(item)
                })
                    .then(response => response.json())
                    .then(() => {
                        getItems();
                        addNameTextbox.value = '';
                    })
                    .catch(error => console.error('Unable to add item.', error));
            }

            function deleteItem(id) {
                fetch(`${uri}/${id}`, {
                    method: 'DELETE'
                })
                    .then(() => getItems())
                    .catch(error => console.error('Unable to delete item.', error));
            }

            function displayEditForm(id) {
                const item = todos.find(item => item.id === id);

                document.getElementById('edit-name').value = item.name;
                document.getElementById('edit-id').value = item.id;
                document.getElementById('edit-isComplete').checked = item.isComplete;
                document.getElementById('editForm').style.display = 'block';
            }

            function updateItem() {
                const itemId = document.getElementById('edit-id').value;
                const item = {
                    id: parseInt(itemId, 10),
                    isComplete: document.getElementById('edit-isComplete').checked,
                    name: document.getElementById('edit-name').value.trim()
                };

                fetch(`${uri}/${itemId}`, {
                    method: 'PUT',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(item)
                })
                    .then(() => getItems())
                    .catch(error => console.error('Unable to update item.', error));

                closeInput();

                return false;
            }

            function closeInput() {
                document.getElementById('editForm').style.display = 'none';
            }

            function _displayCount(itemCount) {
                const name = (itemCount === 1) ? 'to-do' : 'to-dos';

                document.getElementById('counter').innerText = `${itemCount} ${name}`;
            }

            function _displayItems(data) {
                const tBody = document.getElementById('todos');
                tBody.innerHTML = '';

                _displayCount(data.length);

                const button = document.createElement('button');

                data.forEach(item => {
                    let isCompleteCheckbox = document.createElement('input');
                    isCompleteCheckbox.type = 'checkbox';
                    isCompleteCheckbox.disabled = true;
                    isCompleteCheckbox.checked = item.isComplete;

                    let editButton = button.cloneNode(false);
                    editButton.innerText = 'Edit';
                    editButton.setAttribute('onclick', `displayEditForm(${item.id})`);

                    let deleteButton = button.cloneNode(false);
                    deleteButton.innerText = 'Delete';
                    deleteButton.setAttribute('onclick', `deleteItem(${item.id})`);

                    let tr = tBody.insertRow();

                    let td1 = tr.insertCell(0);
                    td1.appendChild(isCompleteCheckbox);

                    let td2 = tr.insertCell(1);
                    let textNode = document.createTextNode(item.name);
                    td2.appendChild(textNode);

                    let td3 = tr.insertCell(2);
                    td3.appendChild(editButton);

                    let td4 = tr.insertCell(3);
                    td4.appendChild(deleteButton);
                });

                todos = data;
            }

        </script>*@
    <script>
        //$(document).ready(function () {
        //$('#dtBasicExample').DataTable();
        //  $('.dataTables_length').addClass('bs-select');
        $('input.search').val('');
        var table = $('#dtMaterialDesignExample').dataTable({
            "pagingType": "full_numbers",
            columnDefs: [{
                orderable: false,
                className: 'select-checkbox select-checkbox-all',
                targets: 0
            }],
            select: {
                style: 'multi',
                selector: 'td:first-child'
            },
            initComplete: function () {
                this.api().columns().every(function () {
                    var column = this;
                    var search = $(`<input class="form-control form-control-sm" type="text" placeholder="Search">`)
                        .appendTo($(column.footer()).empty())
                        .on('change input', function () {
                            var val = $(this).val()

                            column
                                .search(val ? val : '', true, false)
                                .draw();
                        });

                });
            }
        });
        $('input.search').val('');
        table.search('').draw();
                    //table.search("");
                    //table.draw();
                               // $('.dataTables_length').addClass('bs-select');
                                //$('#dtMaterialDesignExample_wrapper').find('label').each(function () {
                                //    $(this).parent().append($(this).children());
                                //});
                                //$('#dtMaterialDesignExample_wrapper .dataTables_filter').find('input').each(function () {
                                //    const $this = $(this);
                                //    $this.attr("placeholder", "Search");
                                //    $this.removeClass('form-control-sm');
                                //});
                               // $('#dtMaterialDesignExample_wrapper .dataTables_length').addClass('d-flex flex-row');
                               // $('#dtMaterialDesignExample_wrapper .dataTables_filter').addClass('md-form');
                               // $('#dtMaterialDesignExample_wrapper select').removeClass('custom-select custom-select-sm form-control form-control-sm');
                               // $('#dtMaterialDesignExample_wrapper select').addClass('mdb-select');
                               // $('#dtMaterialDesignExample_wrapper .mdb-select').materialSelect();
                               // $('#dtMaterialDesignExample_wrapper .dataTables_filter').find('label').remove();
                            //});
    </script>
}